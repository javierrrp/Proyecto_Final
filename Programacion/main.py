import pygame, sys
from pygame.locals import *
from pygame.sprite import Sprite
import random as ra
import time
from animal import *


#Inicializar Pygame
pygame.init()

#crear ventana de Simulador
screen = pygame.display.set_mode((800,600))

#Icono y titulo
pygame.display.set_caption('Proyecto Final (Simulador Sabana)')
icono = pygame.image.load('Logo.ico')
pygame.display.set_icon(icono)




#Matriz
#tamaño de la celda
celda = 40


#ciclos
lluvia = False

#colores de las celkdad
matriz = [
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (0, 149, 29), (0, 149, 29), (0, 255, 251), (0, 255, 251), (0, 255, 251), (0, 149, 29), (0, 149, 29), (238, 249, 118), (170, 253, 152), (238, 249, 118), (238, 249, 118), (170, 253, 152), (170, 253, 152), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152)],
    [(238, 249, 118), (0, 149, 29), (0, 149, 29), (0, 255, 251), (0, 255, 251), (0, 255, 251), (0, 149, 29), (0, 149, 29), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152), (238, 249, 118)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (0, 149, 29), (238, 249, 118), (238, 249, 118), (238, 249, 118), (0, 149, 29), (238, 249, 118), (170, 253, 152), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (191, 191, 191), (191, 191, 191), (191, 191, 191), (170, 253, 152)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152), (170, 253, 152)],
    [(0, 149, 29), (191, 191, 191), (238, 249, 118), (238, 249, 118), (191, 191, 191), (191, 191, 191), (191, 191, 191), (191, 191, 191), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(191, 191, 191), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (191, 191, 191), (191, 191, 191), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152), (170, 253, 152), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (191, 191, 191), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (191, 191, 191), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152), (170, 253, 152), (238, 249, 118), (170, 253, 152), (170, 253, 152), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152), (170, 253, 152), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (255, 255, 255 ), (255, 255, 255), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (255, 255, 255 ), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (191, 191, 191), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118)],
    [(238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (170, 253, 152), (191, 191, 191), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (238, 249, 118), (191, 191, 191), (191, 191, 191), (238, 249, 118), (238, 249, 118), (191, 191, 191)],]

#Clases 


 
class Organismo:
    def __init__(self, posicionx, posiciony, vida, energia, velocidad):
        self.posicionx = posicionx
        self.posiciony = posiciony
        self.vida = vida
        self.energia = energia
        self.velocidad = velocidad

class Animal(Organismo):
    def __init__(self, posicionx, posiciony, vida, energia, velocidad, dieta, especies, imagen):
        super().__init__(posicionx, posiciony, vida, energia, velocidad)
        self.dieta = dieta
        self.especies = especies
        self.imagen = imagen


    def cazar():
        return
    def descomposicion():
        return

    




class Ambiente:
    class lluvia:
        #Constructor
        def __init__(self):
            #posicionx 
            self.x = ra.randint(0, 850)
            #posiciony
            self.y = ra.randint(-200, -20)
            #Velocidad al caer en eje y
            self.yspeed = ra.uniform(0.2, 5)
            self.tamaño = ra.randint(10, 20)

        def mostrar(self, screen):

            self.y += self.yspeed
            self.yspeed += 10

            if self.y > 500:
                self.y = ra.randint(-200, -20)
                self.yspeed = ra.uniform(5, 1)

            pygame.draw.line(screen, (0, 191, 255), (self.x, self.y), (self.x, self.y+self.tamaño), 2)
    




#Crear cantidad de gotas
gotas = [Ambiente.lluvia() for _ in range(200)]
ciclos = 0

#Creamos un par de animales
leon = Leon(100, 30, "Carnivoro", "sada", "Mamifero")
leon2 = Leon(100, 40, "Carnivoro", "sada", "Mamifero")
cebra = Cebra(100, 20, "Herviboro", "sada")
cerdo = Cerdo(100, 25, "Omnivoro", "Mamifero")
jirafa = Jirafa(100, 10, "Herviboro", "Mamifero")
elefante = Elefante(100, 40, "Herviboro", "L. africana Blumenbach, 1797")


#Creacion animales
all_sprites = pygame.sprite.Group()
all_sprites.add(leon, leon2, cebra, cerdo, jirafa, elefante)

#Bucle del Programa
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()


 
    #Dibujar la matriz
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            pygame.draw.rect(screen, matriz[i][j], (j * celda, i * celda, celda, celda))
    

    #Dibujar Lineas en la matriz 
    for i in range(1, len(matriz)):
        pygame.draw.line(screen, (0, 0, 0), (0, i * celda), (800, i * celda), 2)
    for j in range(1, len(matriz[0])):
        pygame.draw.line(screen, (0, 0, 0), (j * celda, 0), (j * celda, 600), 2)
    

    
  

    ciclos += 1
    if ciclos > 12352:
        for gota in gotas:
            gota.mostrar(screen)
    
    


    all_sprites.update()
    all_sprites.draw(screen)
    pygame.display.flip()